#!/bin/zsh
zmodload zsh/complist
zmodload -F zsh/parameter p:funcstack p:functions
zmodload -F zsh/terminfo p:terminfo

.autocomplete.key-binding.precmd() {
  emulate -L zsh
  setopt $_autocomplete__func_opts[@]

  local -a ignored=()
  builtin zstyle -g ignored ':autocomplete:shift-tab:*' insert-unambiguous ||
      builtin zstyle ':autocomplete:shift-tab:*' insert-unambiguous yes

  # TODO: #418 Don't do this. Instead, keep the current Tab and Shift-Tab assignments and just redefine the widgets.
  local tab_style=
  if ! builtin zstyle -s :autocomplete:tab: widget-style tab_style; then
    tab_style='complete-word'
    builtin zstyle ':autocomplete:tab:*' widget-style $tab_style
  fi

  if builtin zstyle -t :autocomplete:tab: fzf-completion &&
      [[ -v functions[fzf-completion] ]]; then
    typeset -gH fzf_default_completion=$tab_style
    functions[.autocomplete.fzf-completion]=$functions[fzf-completion]
    fzf-completion() {
      zle() {
        builtin zle "$@" ${${(M)funcstack[2]:#.autocomplete.fzf-completion}:+-w}
      }
      {
        .autocomplete.fzf-completion "$@"
      } always {
        [[ -v functions[zle] ]] &&
            unfunction zle
      }
    }
  else
    builtin bindkey -M emacs '\t' $tab_style
    builtin bindkey -M viins '\t' $tab_style
  fi

  if [[ $tab_style == *menu-* ]]; then
    builtin bindkey -M menuselect '\t' menu-complete
  else
    builtin bindkey -M menuselect '\t' accept-line
  fi

  if [[ -v terminfo[kcbt] && -n $terminfo[kcbt] ]]; then
    local backtab_style=
    if ! builtin zstyle -s :autocomplete:shift-tab: widget-style backtab_style; then
      backtab_style=${tab_style:/menu-complete/reverse-menu-complete}
      builtin zstyle ':autocomplete:shift-tab:*' widget-style $backtab_style
    fi

    builtin bindkey -M emacs $terminfo[kcbt] $backtab_style
    builtin bindkey -M viins $terminfo[kcbt] $backtab_style
    if [[ $backtab_style == *menu-* ]]; then
      builtin bindkey -M menuselect $terminfo[kcbt] reverse-menu-complete
    else
      builtin bindkey -M menuselect -s $terminfo[kcbt] "\t^_$terminfo[kcbt]"
    fi
  fi

  # TODO: #411 Look up all key bindings that point to a widget that's special to menu selection, except the ones that we
  # actually want to be special during menu selection, and prefix them with `.`.

  # local -Pa complistwidgets=(
  #     down-line-or-history
  #     vi-down-line-or-history
  #     up-line-or-history
  #     vi-up-line-or-history
  #     up-line-or-search

  #     forward-char
  #     vi-forward-char
  #     moves the mark one column right

  #     backward-char, vi-backward-char
  #     moves the mark one column left

  #     forward-word, vi-forward-word
  #     vi-forward-word-end, emacs-forward-word
  #     moves the mark one screenful down

  #     backward-word, vi-backward-word, emacs-backward-word
  #     moves the mark one screenful up

  #     vi-forward-blank-word, vi-forward-blank-word-end
  #     moves the mark to the first line of the next group of matches

  #     vi-backward-blank-word
  #     moves the mark to the last line of the previous group of matches

  #     beginning-of-history
  #     moves the mark to the first line

  #     end-of-history
  #     moves the mark to the last line

  #     beginning-of-buffer-or-history, beginning-of-line
  #     beginning-of-line-hist, vi-beginning-of-line
  #     moves the mark to the leftmost column

  #     end-of-buffer-or-history, end-of-line
  #     end-of-line-hist, vi-end-of-line
  #     moves the mark to the rightmost column

  #     complete-word, menu-complete, expand-or-complete
  #     expand-or-complete-prefix, menu-expand-or-complete
  #     moves the mark to the next match

  #     reverse-menu-complete
  #     moves the mark to the previous match

  #     vi-insert
  #     this toggles between normal and interactive mode; in interactive mode the keys bound to self-insert and self-insert-unmeta insert into the command line as in normal editing mode but without leaving menu selection; after each character completion is tried again and the list changes to contain only the new matches; the completion widgets make the longest unambiguous string be inserted in the command line and undo and backward-delete-char go back to the previous set of matches

  #     history-incremental-search-forward
  #     history-incremental-search-backward
  # )
}

.autocomplete.key-binding.bind() {
  local -P map=$1 widget=$2
  shift 2
  builtin bindkey -M "$map" "${@:^^widget}"
}

.autocomplete.key-binding.bound() {
  [[ $( builtin bindkey -M "$1" "$2" ) == \"$2\"" $3" ]]
}

.autocomplete.key-binding.rebind() {
  .autocomplete.key-binding.bound "$1" "$2" "$3" &&
      builtin bindkey -M "$1" "$2" "$4"
}

.autocomplete.key-binding.unbind() {
  .autocomplete.key-binding.bound "$1" "$2" "$3" &&
      builtin bindkey -M "$1" -r "$2"
}


# FIXME: Move all below to precmd? OMZ overrides some of them, thus breaking stuff.

builtin bindkey -M emacs '^@' list-expand
builtin bindkey -M vicmd '^@' list-expand
builtin bindkey -M viins '^@' list-expand

local -Pa prefix=( '\e'{\[,O} )
local -Pa up=( ${^prefix}A ) down=( ${^prefix}B )
local -Pa alt_up=( '\e'$^up '\e[1;3A' ) alt_down=( '\e'$^down '\e[1;3B' )

.autocomplete.key-binding.bind emacs up-line-or-search $up[@]
.autocomplete.key-binding.bind viins up-line-or-search $up[@]

.autocomplete.key-binding.bind emacs history-search $alt_up[@] $terminfo[kpp]
.autocomplete.key-binding.bind vicmd history-search $up[@]
.autocomplete.key-binding.bind viins history-search $terminfo[kpp]

.autocomplete.key-binding.bind emacs down-line-or-select $down[@]
.autocomplete.key-binding.bind viins down-line-or-select $down[@]
.autocomplete.key-binding.bind vicmd down-line-or-select $down[@]

.autocomplete.key-binding.bind emacs menu-select $alt_down[@] $terminfo[knp]
.autocomplete.key-binding.bind vicmd menu-select $down[@]
.autocomplete.key-binding.bind viins menu-select $terminfo[knp]

# TODO: #472 Make ^S search through completions immediately from the command line.
# Need to make a widget for this that sets MENUSELECT.

.autocomplete.key-binding.rebind emacs '^D' delete-char-or-list delete-char

.autocomplete.key-binding.unbind emacs '^X*' expand-word

.autocomplete.key-binding.unbind emacs '\e^D' list-choices
.autocomplete.key-binding.unbind vicmd   '^D' list-choices
.autocomplete.key-binding.unbind vicmd    '=' list-choices
.autocomplete.key-binding.unbind viins   '^D' list-choices

.autocomplete.key-binding.unbind emacs '^Xg' list-expand
.autocomplete.key-binding.unbind emacs '^XG' list-expand
.autocomplete.key-binding.unbind vicmd  '^G' list-expand
.autocomplete.key-binding.unbind viins  '^G' list-expand

.autocomplete.key-binding.bind menuselect vi-backward-blank-word $alt_up[@]
.autocomplete.key-binding.bind menuselect vi-forward-blank-word  $alt_down[@]
builtin bindkey -M menuselect \
    '\r'  .accept-line \
    '^@'   accept-and-hold \
    "$terminfo[kpp]" backward-word \
    "$terminfo[knp]" forward-word \
    '^_' .undo
builtin bindkey -M menuselect -s '^R' '^_^R'

unfunction .autocomplete.key-binding.{{,re,un}bind,bound}
